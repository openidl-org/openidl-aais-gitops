apiVersion: v1
kind: Service
metadata:
  name: {{ $.Values.orderer.name }}
  namespace: {{ $.Values.metadata.namespace }}
  annotations:
    {{- if $.Values.annotations }}
    {{- range $key, $value := $.Values.annotations.service }}
    {{- range $k, $v := $value }}
      {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- end }}
    {{- end }} 
    {{- if eq $.Values.proxy.provider "ambassador" }}  
    getambassador.io/config: | 
      ---
      apiVersion: ambassador/v2
      kind: TLSContext
      name: tls_context_{{ $.Values.orderer.name }}_{{ $.Values.metadata.namespace }}
      hosts:
      - {{ $.Values.orderer.name }}.{{ $.Values.proxy.external_url_suffix }}
      secret: {{ $.Values.orderer.name }}-{{ $.Values.metadata.namespace }}-ambassador-certs
      alpn_protocols: h2
      min_tls_version: v1.2
      ---
      apiVersion: ambassador/v2
      kind: Mapping
      tls: tls_context_{{ $.Values.orderer.name }}_{{ $.Values.metadata.namespace }}
      grpc: True
      name: orderer_mapping_{{ $.Values.orderer.name }}_{{ $.Values.metadata.namespace }}
      headers:
        :authority: {{ $.Values.orderer.name }}.{{ $.Values.proxy.external_url_suffix }}:8443
      prefix: /
      rewrite: /
      service: https://{{ $.Values.orderer.name }}.{{ $.Values.metadata.namespace }}:7050
      ---
      apiVersion: ambassador/v2
      kind: Mapping
      tls: tls_context_{{ $.Values.orderer.name }}_{{ $.Values.metadata.namespace }}
      grpc: True
      name: orderer_mapping_{{ $.Values.orderer.name }}_{{ $.Values.metadata.namespace }}_rest
      headers:
        :authority: {{ $.Values.orderer.name }}.{{ $.Values.proxy.external_url_suffix }}
      prefix: /
      rewrite: /
      service: https://{{ $.Values.orderer.name }}.{{ $.Values.metadata.namespace }}:7050
  {{- end }}
  labels:
    run: {{ $.Values.orderer.name }}
    app.kubernetes.io/name: {{ $.Values.orderer.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
spec:
  type: {{ $.Values.service.servicetype }}
  selector:
    app: {{ $.Values.orderer.name }}
  ports:
  - protocol: TCP
    targetPort: 7050
    port: {{ $.Values.service.ports.grpc.clusteripport }}
    {{- if  (ne $.Values.service.servicetype "ClusterIP") }}
    nodePort: {{ $.Values.service.ports.grpc.nodeport }}
    {{- end }}
    name: grpc
  {{- if (eq $.Values.service.servicetype "ClusterIP") }}
  clusterIP: None
  {{- end }}
  
{{ if eq $.Values.proxy.provider "nginx" }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $.Values.orderer.name }}
  namespace: {{ $.Values.metadata.namespace }}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    #nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: {{ $.Values.orderer.name }}.{{ $.Values.proxy.external_url_suffix }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ $.Values.orderer.name }}
            port:
              number: {{ $.Values.service.ports.grpc.clusteripport }}
{{ end }}
