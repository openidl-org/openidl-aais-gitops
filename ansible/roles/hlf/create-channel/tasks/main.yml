---

- name: Pull admin identity from the wallet
  include_role: 
    name: wallet
  vars:
    wallet_ops: "get"
    wallet_path: "{{ msp_admin_id }}"

- set_fact:
    msp_admin: "{{wallet_operator_identity_dict}}"
  no_log: true

- name: Pull admin identity from the wallet
  include_role: 
    name: wallet
  vars:
    wallet_ops: "get"
    wallet_path: "{{ msp_admin_tls_id }}"

- set_fact:
    msp_admin_tls: "{{ wallet_operator_identity_dict }}"
  no_log: true

- name: "Fail if channel_name is empty"
  fail:
     msg: "Please define the name of the channel"
  when: channel_name == ""

- name: Preapre channel block file directory
  file:
    state: directory
    path: "{{channel_file_directory}}"

- set_fact:
    channel_block_file_path: "{{channel_file_directory}}/{{channel_name}}"

- name: Delete any old channel block file
  file:
    state: absent
    path: "{{channel_block_file_path}}"

- name: Fail if channel exists
  ibm.blockchain_platform.channel_block:
    api_endpoint: "{{ console_api_endpoint }}"
    api_authtype: "{{ console_api_authtype }}"
    api_key: "{{ console_username }}"
    api_secret: "{{ console_password | default(omit) }}"
    #api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
    operation: fetch
    ordering_service: "{{ ordering_service_name }}"
    identity: "{{ msp_admin }}"
    msp_id: "{{ msp_id }}"
    name: "{{ channel_name }}"
    target: 0
    path: "{{channel_block_file_path}}"
  register: result
  failed_when: result.failed == false

- name: "Create the configuration update for the new channel"
  ibm.blockchain_platform.channel_config:
    api_endpoint: "{{ console_api_endpoint }}"
    api_authtype: "{{ console_api_authtype }}"
    api_key: "{{ console_username }}"
    api_secret: "{{ console_password | default(omit) }}"
    # api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
    operation: create
    name: "{{ channel_name }}"
    identity: "{{ msp_admin }}"
    msp_id: "{{ msp_id }}"
    path: "{{channel_block_file_path}}"
    organizations:
      - "{{ msp_id }}"
    policies:
      Admins: "{{ lookup('template', 'admins-policy.json.j2') }}"
      Readers: "{{ lookup('template', 'readers-policy.json.j2') }}"
      Writers: "{{ lookup('template', 'writers-policy.json.j2') }}"
      Endorsement: "{{ lookup('template', 'endorsement-policy.json.j2') }}"
      LifecycleEndorsement: "{{ lookup('template', 'lifecycle-endorsement-policy.json.j2') }}"
    capabilities:
      application: V2_0
  when: result.msg is defined and 'NOT_FOUND' in result.msg

- name: "Sign the channel configuration update for the new channel"
  ibm.blockchain_platform.channel_config:
    api_endpoint: "{{ console_api_endpoint }}"
    api_authtype: "{{ console_api_authtype }}"
    api_key: "{{ console_username }}"
    api_secret: "{{ console_password | default(omit) }}"
    operation: sign_update
    identity: "{{ msp_admin }}"
    msp_id: "{{ msp_id }}"
    name: "{{ channel_name }}"
    path: "{{channel_block_file_path}}"
  when: result.msg is defined and 'NOT_FOUND' in result.msg

- name: "Retreive the ordering service info"
  ibm.blockchain_platform.channel_config:
    api_endpoint: "{{ console_api_endpoint }}"
    api_authtype: "{{ console_api_authtype }}"
    api_key: "{{ console_username }}"
    api_secret: "{{ console_password | default(omit) }}"
    name: "{{ ordering_service_name }}"
  register: ord_service_info

- debug:
    msg: "{{ord_service_info}}"
# RETURNS:
# exists:
#     description:
#         - True if the ordering service exists, false otherwise.
#     type: boolean
# ordering_service:
#     description:
#         - The ordering service, as a list of ordering service nodes.
#     returned: if ordering service exists
#     type: list
#     elements: dict
#     contains:
#         name:
#             description:
#                 - The name of the ordering service node.
#             type: str
#             sample: Ordering Service_1
#         api_url:
#             description:
#                 - The URL for the API of the ordering service node.
#             type: str
#             sample: grpcs://orderingservice1-api.example.org:32000
#         operations_url:
#             description:
#                 - The URL for the operations service of the ordering service node.
#             type: str
#             sample: https://orderingservice1-operations.example.org:32000
#         grpcwp_url:
#             description:
#                 - The URL for the gRPC web proxy of the ordering service node.
#             type: str
#             sample: https://orderingservice1-grpcwebproxy.example.org:32000
#         msp_id:
#             description:
#                 - The MSP ID of the ordering service node.
#             type: str
#             sample: OrdererOrgMSP
#         pem:
#             description:
#                 - The TLS certificate chain for the ordering service node.
#                 - The TLS certificate chain is returned as a base64 encoded PEM.
#             type: str
#             sample: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...
#         tls_ca_root_cert:
#             description:
#                 - The TLS certificate chain for the ordering service node.
#                 - The TLS certificate chain is returned as a base64 encoded PEM.
#             type: str
#             sample: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...
#         tls_cert:
#             description:
#                 - The TLS certificate for the ordering service node.
#                 - The TLS certificate is returned as a base64 encoded PEM.
#             type: str
#             sample: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...
#         location:
#             description:
#                 - The location of the ordering service node.
#             type: str
#             sample: ibmcloud
#         system_channel_id:
#             description:
#                 - The name of the system channel for the ordering service node.
#             type: str
#             sample: testchainid
#         systemless:
#             description:
#                 - Systemless ordering
#             type: booelan
#             sample: true
#         client_tls_cert:
#             description:
#                 - The client TLS certificate for the ordering service node.
#                 - The client TLS certificate is returned as a base64 encoded PEM.
#             type: str
#             sample: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...
#         server_tls_cert:
#             description:
#                 - The server TLS certificate for the ordering service node.
#                 - The server TLS certificate is returned as a base64 encoded PEM.
#             type: str
#             sample: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...
#         cluster_id:
#             description:
#                 - The unique ID of the ordering service cluster.
#             type: str
#             sample: abcdefgh
#         cluster_name:
#             description:
#                 - The name of the ordering service cluster.
#             type: str
#             sample: Ordering Service
#         consenter_proposal_fin:
#             description:
#                 - True if the ordering service node has been added to the consenter
#                   set of the system channel, false otherwise. Ordering service nodes
#                   that have not been added to the consenter set of the system channel
#                   are not ready for use.
#             type: boolean
#             sample: true

# Loop over ord_service_info.ordering_service[] , join ordering nodes to the new channel only if the ordering nodesa re not already part of the channel
# use ordering node address variable that is passed will join a single ordering node to the chnanel

# Use msp_admin_tls to get the client-cert, client-key , the ca-file is part of the ordering info above see tls_ca_root_cert , store them in files and pass to the command line
# decode them first from base64 
# - name: Join all ordering nodes to the channel
#     shell: |
#       osnadmin channel join --channelID "{{channel_name}}" --config-block "{{channel_block_file_path}}" -o "{{order-address}}"
#       --ca-file=CA-FILE          Path to file containing PEM-encoded TLS CA certificate(s) for the OSN
      # --client-cert=CLIENT-CERT  Path to file containing PEM-encoded X509 public key to use for mutual TLS communication with the OSN
      # --client-key=CLIENT-KEY    Path to file containing PEM-encoded private key to use for mutual TLS communication with the OSN
