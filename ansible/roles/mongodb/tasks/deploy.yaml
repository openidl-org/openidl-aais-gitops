---
- name: Generate aws resource policy from template aws_resource_policy.json.j2
  template:
    src: templates/aws_resource_policy.json.j2
    dest: ./aws_resource_policy.json
    mode: 0755

- name: Create namespace
  k8s:
    state: present
    definition:
      api_version: v1
      kind: Namespace
      metadata:
        name: "{{ mongodb.namespace }}"

- name: mongodb Helm chart repo
  kubernetes.core.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami
  tags:
    - mongodb
    - mongodb-helm-repo

- name: Install mongodb helm chart
  kubernetes.core.helm:
    chart_ref: bitnami/mongodb
    release_name: "{{ network.org_name }}"
    release_state: present
    release_namespace: "{{ mongodb.namespace }}"
    force: True
    wait: True
    wait_timeout: "300s"
    update_repo_cache: True
    disable_hook: True
    release_values:
      architecture: replicaset
      useStatefulSet: true
      auth:
        enabled: true
        rootPassword: "{{ mongodb_root_token }}"
        username: "{{ mongodb_user }}"
        password: "{{ mongodb_user_token }}"
        database: "{{ mongodb_database }}"
      persistence:
        enabled: true
        size: 20Gi
        mountPath: "/bitnami/mongodb"
        storageClass: "openidl-sc"
      serviceAccount:
        create: true
        name: "{{ network.org_name }}mongodbsvcuser"
      externalAccess:
        enabled: false
        service:
          type: ClusterIP
      replicaSetHostnames: true
      replicaCount: 3
      tls:
        enabled: false
      readinessProbe:
        enabled: false
      arbiter:
        livenessProbe:
          enabled: false
      global:
        namespaceOverride: "{{ mongodb.namespace }}"
  tags:
    - mongodb
    - mongodb-helm

- name: Check mongodb-user secret exists
  shell : |
    aws secretsmanager list-secrets --filter Key="name",Values="{{ network.org_name }}-{{ env }}-mongodb-user" | jq .SecretList[0].Name
  register: mongodb_user_secret

- name: Create mongodb user in AWS secrets manager
  no_log: false
  shell: |
    aws secretsmanager create-secret --name {{ network.org_name }}-{{ env }}-mongodb-user --description "Mongodb User Name" --secret-string {{ mongodb_user }}
  when: mongodb_user_secret.stdout == "null"

- name: Update mongodb user in AWS secrets manager
  no_log: false
  shell: |
    aws secretsmanager update-secret --secret-id {{ network.org_name }}-{{ env }}-mongodb-user --secret-string {{ mongodb_user }}
  when: mongodb_user_secret.stdout != "null"

- name: Check mongodb-user-token secret exists
  shell : |
    aws secretsmanager list-secrets --filter Key="name",Values="{{ network.org_name }}-{{ env }}-mongodb-user-token" | jq .SecretList[0].Name
  register: mongodb_user_token_secret

- name: Create mongodb user token in AWS secrets manager
  no_log: false
  shell: |
    aws secretsmanager create-secret --name {{ network.org_name }}-{{ env }}-mongodb-user-token --description "Mongodb User Token" --secret-string {{ mongodb_user_token }}
  when: mongodb_user_token_secret.stdout == "null"

- name: Update mongodb user token in AWS secrets manager
  no_log: false
  shell: |
    aws secretsmanager update-secret --secret-id {{ network.org_name }}-{{ env }}-mongodb-user-token --secret-string {{ mongodb_user_token }}
  when: mongodb_user_token_secret.stdout != "null"

- name: Check mongodb-root-token secret exists
  shell : |
    aws secretsmanager list-secrets --filter Key="name",Values="{{ network.org_name }}-{{ env }}-mongodb-root-token" | jq .SecretList[0].Name
  register: mongodb_root_token_secret

- name: Create mongodb root token in AWS secrets manager
  no_log: false
  shell: |
    aws secretsmanager create-secret --name {{ network.org_name }}-{{ env }}-mongodb-root-token --description "Mongodb root token" --secret-string {{ mongodb_root_token }}
  when: mongodb_root_token_secret.stdout == "null"

- name: Update mongodb root token in AWS secrets manager
  no_log: false
  shell: |
    aws secretsmanager update-secret --secret-id {{ network.org_name }}-{{ env }}-mongodb-root-token --secret-string {{ mongodb_root_token }}
  when: mongodb_root_token_secret.stdout != "null"

- name: Add resource policy to the secret created {{ item }}
  shell: |
    aws secretsmanager put-resource-policy --secret-id {{ item }} --resource-policy file://aws_resource_policy.json --region {{ aws_region }} --block-public-policy
  with_items:
  - "{{ network.org_name }}-{{ env }}-mongodb-user-token"
  - "{{ network.org_name }}-{{ env }}-mongodb-root-token"
  - "{{ network.org_name }}-{{ env }}-mongodb-user"

- name: Delete aws resource policy file
  file:
    state: absent
    path: ./aws_resources_policy.json
