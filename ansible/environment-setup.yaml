---
#######################################
# Playbook to setup the environment for running the Blockchain Automation Framework configurations
#  - checks and installs kubectl, helm and vault clients
#  - If cloud platform is AWS, checks and installs aws-cli and aws-authenticator
#######################################
  - hosts: ansible_provisioners
    gather_facts: yes
    no_log: "{{ no_ansible_log | default(false) }}"
    tasks:
    - include_role:
        name: "import-config-vars"
    - include_role:
        name: setup/common-packages
      vars:
        common_packages:
          - git
          - jq
          - gcc
          - python3-devel
    - include_role:
        name:  setup/kubectl
      vars:
        kubectl:
          os: "{{ install_os }}"
          arch: "{{ install_arch }}"
          bin_directory: "{{ bin_install_dir }}"
    - include_role:
        name:  setup/helm
      vars:
        helm:
          os: "{{ install_os }}"
          arch: "{{ install_arch }}"
          bin_directory: "{{ bin_install_dir }}"
    - include_role:
        name:  setup/vault
      vars:
        vault:
          os: "{{ install_os }}"
          arch: "{{ install_arch }}"
          bin_directory: "{{ bin_install_dir }}"
    - name: AWS CLI setup
      include_role:
        name: setup/aws-cli
      vars:
        aws_access_key: "{{ aws.access_key }}"
        aws_secret_key: "{{ aws.secret_key }}"
        aws_external_id: "{{ aws_external_id }}"
        aws_assume_role_arn: "{{ aws_assume_role_arn }}"
        eks_cluster: "{{ fabric_operator_k8s_cluster }}"
      when: cloud_provider == 'aws'

    - name: AWS AUTH setup
      include_role:
        name: setup/aws-auth
      vars:
        aws_authenticator:
          os: "{{ install_os }}"
          arch: "{{ install_arch }}"
          bin_directory: "{{ bin_install_dir }}"
      when: cloud_provider == 'aws'

    - include_role:
        name: setup/fabric
      vars:
        aws_access_key: "{{ cicd_aws.access_key }}"
        aws_secret_key: "{{ cicd_aws.secret_key }}"
        aws_external_id: "{{ cicd_aws_external_id }}"
        aws_assume_role_arn: "{{ cicd_aws_assume_role_arn }}"
        default_aws_profile: cicd-role
    vars: #These variables can be overriden from the command line
      privilege_escalate: false           #Default to NOT escalate to root privledges
      install_os: "linux"                 #Default to linux OS
      install_arch:  "amd64"              #Default to amd64 architecture
      bin_install_dir:  "/usr/local/bin"           #Default to ~/bin install directory for binaries
